async def display_player_window(self, player):
player_view = PlayerView(self.ctx, self, player)
message = await self.ctx.send(f"c'est au tour de {player.name} :", view=player_view)
player_view.start_countdown(message)





async def handle_played(self, ctx):
    await self._compute_next_player(ctx)

    if self.current_player:
        await self.display_player_window(self.current_player)
        return

    await ctx.send(f"Le tour est terminé ")

    # No next player, reveal next card
    ret = self.next_card()
    if ret:
        await ctx.send(ret)
        self.reset_current_player()
        await self.display_player_window(self.current_player)
    else:
        self.end_game()
        winners_text = ', '.join([winner.name for winner in self.winners])
        await ctx.send(
            f"Le jeu est terminé! Le gagnant est: **{winners_text}** avec une **{self.winning_hand_type}**. Le pot de **{self.pot} jetons** a été distribué."
        )
        await self.display_entry_window(self.players[0])
        await self.display_cpu_window(self.players[0])
        await self.display_start_window(self.players[0])
        self.reset_game()

def _get_author_or_cpu_if_current(self):
    player = self.ctx.author
    expected_player = self.current_player
    if expected_player and isinstance(expected_player, FakeMember):
        player = expected_player
    return player

def _get_human_player(self, player):
    if isinstance(player, FakeMember):
        return self.get_first_active_player()
    return player